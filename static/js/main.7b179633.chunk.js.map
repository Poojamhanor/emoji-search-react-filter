{"version":3,"sources":["components/filter.js","components/forkRibbon.js","App.js","serviceWorker.js","index.js"],"names":["Filter","handleChange","event","setState","search","target","value","state","this","SearchFilter","Data","filter","item","title","toLowerCase","indexOf","keywords","className","src","width","height","alt","type","placeholder","onChange","slice","map","items","index","key","symbol","Component","Ribbon","class","href","style","color","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4usKAkEeA,E,YA7Dd,aAAgB,IAAD,8BACd,+CAODC,aAAe,SAACC,GACf,EAAKC,SAAU,CACdC,OAASF,EAAMG,OAAOC,SAPvB,EAAKC,MAAQ,CACZH,OAAS,IAJI,E,sEAaJ,IAEFA,EAAUI,KAAKD,MAAfH,OAEDK,EAAeC,EAAKC,QAAQ,SAAAC,GACjC,OAAgE,IAA5DA,EAAKC,MAAMC,cAAcC,QAAQX,EAAOU,iBAEuB,IAA/DF,EAAKI,SAASF,cAAcC,QAAQX,EAAOU,kBAK/C,OACE,6BACF,yBAAKG,UAAU,OACf,4BAAQA,UAAU,oBACjB,yBACCC,IAAI,mDACJC,MAAM,KACNC,OAAO,KACPC,IAAI,KALN,eAQC,yBACCH,IAAI,mDACJC,MAAM,KACNC,OAAO,KACPC,IAAI,MAGL,8BACC,yBAAKJ,UAAU,cACd,2BAAOK,KAAK,OAAOC,YAAY,qBAC/BC,SAAUhB,KAAKP,aAAcgB,UAAU,0BAIpCR,EAAagB,MAAM,EAAE,IAAIC,KAAI,SAASC,EAAOC,GACjD,OAAO,yBAAKC,IAAKD,EAAOX,UAAU,SACjC,0BAAMA,UAAU,SAAUU,EAAMG,QAC/B,0BAAMb,UAAU,eAAeU,EAAMd,gB,GAtDxBkB,aCGNC,MANf,WACI,OACI,uBAAGC,MAAM,qBAAqBC,KAAK,0DAA0DrB,MAAM,oBAAoBsB,MAAO,CAACC,MAAO,UAAtI,sBCaOC,E,iLATX,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GALUN,aCKEO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDmH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.7b179633.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Data from './emojiList.json';\n\n\nclass Filter extends Component {\n\tconstructor () {\n\t\tsuper ();\n\n\t\tthis.state = {\n\t\t\tsearch : ''\t\n\t\t}\n\t}\n\n\thandleChange = (event) => {\n\t\tthis.setState ({\n\t\t\tsearch : event.target.value\n\t\t});\n\t}\n  render() {\n  \t\n  \tconst {search} = this.state;\n\n  \tconst SearchFilter = Data.filter( item => {\n  \t\tif (item.title.toLowerCase().indexOf(search.toLowerCase()) !== -1)\n  \t\t\treturn true\n  \t\tif (item.keywords.toLowerCase().indexOf(search.toLowerCase()) !== -1)\n  \t\t\treturn true\n  \t\treturn false\n  \t})\n  \t\n    return (\n      <div>\n\t\t\t\t<div className=\"App\">\n\t\t\t\t<header className=\"component-header\">\n\t\t\t\t\t<img\n\t\t\t\t\t\tsrc=\"//cdn.jsdelivr.net/emojione/assets/png/1f638.png\"\n\t\t\t\t\t\twidth=\"32\"\n\t\t\t\t\t\theight=\"32\"\n\t\t\t\t\t\talt=\"\"\n\t\t\t\t\t/>\n\t\t\t\t\tEmoji Search\n\t\t\t\t\t<img\n\t\t\t\t\t\tsrc=\"//cdn.jsdelivr.net/emojione/assets/png/1f63a.png\"\n\t\t\t\t\t\twidth=\"32\"\n\t\t\t\t\t\theight=\"32\"\n\t\t\t\t\t\talt=\"\"\n\t\t\t\t\t/>\n\t\t\t\t</header>\n\t\t\t\t\t<form>\n\t\t\t\t\t\t<div className=\"form-group\">\n\t\t\t\t\t\t\t<input type=\"text\" placeholder=\"Emoji Search......\" \n\t\t\t\t\t\t\tonChange={this.handleChange} className=\"form-control input\" />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</form>\n\t\t\t\t</div>     \n\t        {SearchFilter.slice(0,20).map(function(items, index){\n\t  \t \treturn <div key={index} className=\"items\">\n\t\t\t\t \t\t<span className=\"emoji\" >{items.symbol}</span>\n\t  \t \t\t\t<span className=\"emoji title\">{items.title}</span>\n\t  \t \t\t   </div>\n\t  \t \t})}\n      </div>\n    );\n  }\n}\n\nexport default Filter;","import React from 'react';\nfunction Ribbon(){\n    return (\n        <a class=\"github-fork-ribbon\" href=\"https://github.com/mahanor123/emoji-search-react-filter\" title=\"Fork me on GitHub\" style={{color: \"white\"}}>Fork me on GitHub</a>\n      \n    )\n}\nexport default Ribbon;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Filter from  './components/filter.js';\nimport Ribbon from './components/forkRibbon';\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <Filter />\n        <Ribbon/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}